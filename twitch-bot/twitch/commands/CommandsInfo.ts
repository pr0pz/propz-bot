/**
 * Info Commands
 * Information & Social Commands (Links, Stats, Rankings, etc.)
 *
 * @author Wellington Estevo
 * @version 2.0.0
 */

import { BotData } from '@bot/BotData.ts';
import { Rankings } from '@modules/features/Rankings.ts';
import { UserData } from '@modules/features/UserData.ts';

import type { TwitchCommand, TwitchCommandOptions } from '@shared/types.ts';
import type { Twitch } from '@twitch/core/Twitch.ts';

export default function createInfoCommands(twitch: Twitch): Record<string, TwitchCommand> {
	return {
		br: {
			aliases: ['businessrauschen'],
			message: {
				de: 'Business Rauschen ‚Ä∫ Der Businesstalk mit @dorothea_coaching ‚ñ∂Ô∏è https://business-rauschen.de üñºÔ∏è',
				en: 'Business Noise ‚Ä∫ The Businesstalk with @dorothea_coaching ‚ñ∂Ô∏è https://business-rauschen.de üñºÔ∏è'
			},
			description: 'Business Rauschen Website'
		},
		chatscore: {
			description: 'Anzahl geschriebener Chat-Nachrichten',
			handler: async (options: TwitchCommandOptions) => {
				return await Rankings.getUserScoreText(
					options.param || options.sender.name,
					options.returnMessage,
					'message_count',
					twitch.data
				);
			},
			message: {
				de: '@[user] hat [count] Chat-Nachrichten geschrieben ‚Ä∫ Rank: [rank]',
				en: '@[user] has written [count] chat messages ‚Ä∫ Rank: [rank]'
			}
		},
		chatranking: {
			description: 'Wer sind die Top chatter?',
			handler: (_options: TwitchCommandOptions) => {
				return Rankings.getRankingText('message_count', UserData.getAll());
			}
		},
		dailydev: {
			message: {
				de: 'Die besten DEV News ‚ñ∂Ô∏è https://propz.de/dailydev',
				en: 'Check out the best dev news ‚ñ∂Ô∏è https://propz.de/dailydev'
			}
		},
		discord: {
			aliases: ['dc'],
			message: {
				de: 'Ab in die kreative Discord-Community ‚ñ∂Ô∏è https://propz.de/discord/ üöÄ',
				en: 'Join the creative Discord community ‚ñ∂Ô∏è https://propz.de/discord/ üöÄ'
			},
			description: 'Link zur Discord Community'
		},
		dogado: {
			message: {
				de: 'Hosting made in Germany: Super schnelle NVMe VPS mit ISO zertifizierten Support ‚ö° https://propz.de/dogado-vps [Werbung]',
				en: 'Hosting made in Germany: Super fast NVMe VPS with ISO certified Support ‚ö° https://propz.de/dogado-vps [Ad]',
			}
		},
		donate: {
			aliases: ['kofi'],
			description: 'Support the Stream',
			message: {
				de: 'Unterst√ºtze den kreativen Flow mit einer Runde virtuellen Kaffee! ‚òï https://propz.de/donate',
				en: 'Support the creative flow with a virtual coffee! ‚òï https://propz.de/donate'
			}
		},
		doro: {
			message: {
				de: 'Coaching gef√§llig? Schau mal bei Doro vorbei ‚ñ∂Ô∏è https://www.dorothea-penner.de/',
				en: 'In need of some coaching? Check out Doro ‚ñ∂Ô∏è https://www.dorothea-penner.de/'
			},
			description: 'Link zu Doros Website'
		},
		dummtopf: {
			message: {
				de: 'Da klingelt die Kasse ‚Ä∫ Das macht 1‚Ç¨ bitte',
				en: 'The cash register rings ‚Ä∫ That\'ll be 1‚Ç¨ please'
			},
			description: '1‚Ç¨ Spende f√ºr jeden dummen Fehler'
		},
		first: {
			handler: (options: TwitchCommandOptions) => {
				return options.returnMessage?.replace(
					'[user]',
					twitch.firstChatter.get()
				);
			},
			description: 'First Chatter des Streams',
			message: {
				de: '@[user] war heute die erste Chatterin üí¨',
				en: '@[user] was the first chatter today üí¨'
			}
		},
		firstscore: {
			handler: async (options: TwitchCommandOptions) => {
				return await Rankings.getUserScoreText(
					options.param || options.sender.name,
					options.returnMessage,
					'first_count',
					twitch.data
				);
			},
			message: {
				de: '@[user] war [count]x erste Chatterin ‚Ä∫ Rank: [rank]',
				en: '@[user] was [count]x first chatter ‚Ä∫ Rank: [rank]'
			},
			description: 'First-Chat score'
		},
		firstranking: {
			description: 'Wer sind die Top first chatter?',
			handler: (_options: TwitchCommandOptions) => {
				return Rankings.getRankingText('first_count', UserData.getAll());
			}
		},
		floripa: {
			message: 'Floripa ‚Ä∫ https://maps.app.goo.gl/nh8erwbu112ytM3V7'
		},
		followage: {
			handler: async (options: TwitchCommandOptions) => {
				return await Rankings.getUserScoreText(
					options.param || options.sender.name,
					options.returnMessage,
					'follow_date',
					twitch.data
				);
			},
			aliases: ['follow'],
			description: 'Wie lange du mir folgst',
			message: {
				de: '@[user] folgt [broadcaster] seit: [count]',
				en: '@[user] has been following [broadcaster] since: [count]'
			}
		},
		giftscore: {
			description: 'Wer hat am meisten Subs verschenkt?',
			handler: async (options: TwitchCommandOptions) => {
				return await Rankings.getUserScoreText(
					options.param || options.sender.name,
					options.returnMessage,
					'gift_count',
					twitch.data
				);
			},
			message: {
				de: '@[user] hat [count] Abos verschenkt ‚Ä∫ Rank: [rank]',
				en: '@[user] gifted [count] Subs ‚Ä∫ Rank: [rank]'
			}
		},
		giftranking: {
			description: 'Wer sind die Top Sub gifter?',
			handler: (_options: TwitchCommandOptions) => {
				return Rankings.getRankingText('gift_subs', UserData.getAll());
			}
		},
		github: {
			message: {
				de: 'Creative Coding Chaos par excellence ‚ñ∂Ô∏è https://propz.de/github/ üíª',
				en: 'Creative Coding Chaos par excellence ‚ñ∂Ô∏è https://propz.de/github/ üíª'
			},
			description: 'Creative Coding Chaos'
		},
		instagram: {
			aliases: ['insta'],
			message: {
				de: 'Influencer f√ºr arme ‚ñ∂Ô∏è https://propz.de/instagram/ üåÑ',
				en: 'Influencer for the poor ‚ñ∂Ô∏è https://propz.de/instagram/ üåÑ'
			},
			description: 'Influencer f√ºr arme'
		},
		neubrutalism: {
			message: {
				de: 'Neu Brutalism ‚ñ∂Ô∏è https://dribbble.com/search/neo-brutalism',
				en: 'Neo Brutalism ‚ñ∂Ô∏è https://dribbble.com/search/neo-brutalism'
			},
			description: 'NB Beispiele'
		},
		prime: {
			message: {
				de: 'Wenn du ein Amazon Prime Konto hast, kannst du dieses mit Twitch verbinden. Jeden Monat hast du die M√∂glichkeit einen Streamer deiner Wahl KOSTENLOS zu Subscriben! @propz_tv w√ºrde sich √ºber DEINEN Prime-Sub sehr freuen! ‚Ä∫ twitch.tv/subs/propz_tv',
				en: 'If you have an Amazon Prime account, you can connect it to Twitch. Every month, you have the opportunity to subscribe to a streamer of your choice for FREE! @propz_tv would be very happy to receive YOUR Prime subscription! ‚Ä∫ twitch.tv/subs/propz_tv'
			}
		},
		protonmail: {
			message: {
				de: 'Sichere E-Mail, die Ihre Privatsph√§re sch√ºtzt ‚Ä∫ https://propz.de/proton-mail [Werbung]',
				en: 'Secure email that protects your privacy ‚Ä∫ https://propz.de/proton-mail [Ad]'
			}
		},
		protonpass: {
			aliases: ['proton'],
			message: {
				de: 'Der datenschutzfreundliche Passwortmanager, dem Streamer vertrauen ‚Ä∫ https://propz.de/proton-pass [Werbung]',
				en: 'The privacy focused password manager that streamers trust ‚Ä∫ https://propz.de/proton-pass [Ad]'
			}
		},
		protonvpn: {
			aliases: ['vpn'],
			message: {
				de: 'Surfen Sie privat mit einem sicheren VPN, das Ihre Privatsph√§re sch√ºtzt. ‚Ä∫ https://propz.de/proton-vpn [Werbung]',
				en: 'Browse privately with a secure VPN that safeguards your privacy. ‚Ä∫ https://propz.de/proton-vpn [Ad]'
			}
		},
		raidscore: {
			description: 'Wie oft hat der User geraidet?',
			handler: async (options: TwitchCommandOptions) => {
				return await Rankings.getUserScoreText(
					options.param || options.sender.name,
					options.returnMessage,
					'raid_count',
					twitch.data
				);
			},
			message: {
				de: '@[user] hat uns [count]x geraidet ‚Ä∫ Rank: [rank]',
				en: '@[user] raided us [count]x times ‚Ä∫ Rank: [rank]'
			}
		},
		raidranking: {
			description: 'Wer sind die Top Raider?',
			handler: (_options: TwitchCommandOptions) => {
				return Rankings.getRankingText('raid_count', UserData.getAll());
			}
		},
		roadmap: {
			message: {
				de: 'Roadmaps f√ºr alle DEVs und die es werden wollen ‚ñ∂Ô∏è https://roadmap.sh',
				en: 'Roadmaps for all DEVs and aspiring developers ‚ñ∂Ô∏è https://roadmap.sh'
			},
			description: 'Roadmaps for Devs'
		},
		subscore: {
			description: 'Anzahl gesubbter Monate',
			handler: async (options: TwitchCommandOptions) => {
				return await Rankings.getUserScoreText(
					options.param || options.sender.name,
					options.returnMessage,
					'sub_count',
					twitch.data
				);
			},
			message: {
				de: '@[user] hat [count] Monate aboniert ‚Ä∫ Rank: [rank]',
				en: '@[user] subbed [count] months ‚Ä∫ Rank: [rank]'
			}
		},
		subranking: {
			description: 'Wer sind die Top subber?',
			handler: (_options: TwitchCommandOptions) => {
				return Rankings.getRankingText('sub_count', UserData.getAll());
			}
		},
		testconf: {
			message: {
				de: 'TECH STREAM CONFERENCE üöÄ Alle Infos hier ‚ñ∂Ô∏è https://test-conf.de',
				en: 'TECH STREAM CONFERENCE üöÄ All Informations here ‚ñ∂Ô∏è https://test-conf.de'
			},
			description: 'Beste Konferenz'
		},
		tiktok: {
			message: {
				de: 'Tiktok Trends f√ºr Kreative ‚ñ∂Ô∏è https://propz.de/tiktok/ üì∫',
				en: 'Tiktok Trends for Creatives ‚ñ∂Ô∏è https://propz.de/tiktok/ üì∫'
			},
			description: 'Trends f√ºr Kreative'
		},
		tools: {
			message: {
				de: 'Browser: https://arc.net / Design: https://www.figma.com / Coding: https://code.visualstudio.com / Orga: https://excalidraw.com https://www.notion.so / Stream: https://obsproject.com https://www.touch-portal.com https://restream.io / Twitch Bot: https://twurple.js.org / FTP: https://panic.com/transmit / CMS: https://wordpress.org',
				en: 'Browser: https://arc.net / Design: https://www.figma.com / Coding: https://code.visualstudio.com / Orga: https://excalidraw.com https://www.notion.so / Stream: https://obsproject.com https://www.touch-portal.com https://restream.io / Twitch: https://twurple.js.org / FTP: https://panic.com/transmit / CMS: https://wordpress.org'
			},
			description: 'Alle benutzen Tools'
		},
		tucalendi: {
			message: {
				de: 'Vollst√§ndig KI-gemanagte Terminbuchung üóìÔ∏è https://www.tucalendi.com/de/ [Werbung]',
				en: 'Fully AI-powered appointment booking üóìÔ∏è https://www.tucalendi.com/en/ [Ad]'
			}
		},
		twurple: {
			message: {
				de: 'Twurple f√ºr Twitch API ‚ñ∂Ô∏è https://twurple.js.org',
				en: 'Twurple for Twitch API ‚ñ∂Ô∏è https://twurple.js.org'
			},
			description: 'Twurple f√ºr Twitch API'
		},
		watchtime: {
			description: 'Zugeschaute Stunden',
			handler: async (options: TwitchCommandOptions) => {
				return await Rankings.getUserWatchtimeText(
					options.param || options.sender.name,
					options.returnMessage,
					BotData.broadcasterName
				);
			},
			message: {
				de: '@[user] guckt [broadcaster] flei√üig zu: [count] ‚Ä∫ Rank: [rank]',
				en: '@[user] is diligently watching [broadcaster]: [count] ‚Ä∫ Rank: [rank]'
			}
		},
		web: {
			message: {
				de: 'Hier lebt das kreative Chaos ‚ñ∂Ô∏è https://propz.de üñ•Ô∏è',
				en: 'Here lives the creative chaos ‚ñ∂Ô∏è https://propz.de üñ•Ô∏è'
			},
			description: 'Hier lebt das kreative Chaos'
		},
		youtube: {
			aliases: ['yt'],
			message: {
				de: 'Da gibt es so Videos ‚ñ∂Ô∏è https://propz.de/youtube/ üì∫',
				en: 'There are some videos ‚ñ∂Ô∏è https://propz.de/youtube/ üì∫'
			},
			description: 'Videos und VOD\'s'
		}
	};
}
